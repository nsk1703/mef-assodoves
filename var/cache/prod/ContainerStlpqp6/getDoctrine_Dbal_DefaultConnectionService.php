<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Connection.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/event-manager/lib/Doctrine/Common/EventManager.php';
include_once $this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/ContainerAwareEventManager.php';
include_once $this->targetDirs[3].'/vendor/friendsofsymfony/user-bundle/Doctrine/UserListener.php';
include_once $this->targetDirs[3].'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Sluggable/SluggableListener.php';
include_once $this->targetDirs[3].'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Timestampable/TimestampableListener.php';
include_once $this->targetDirs[3].'/vendor/gedmo/doctrine-extensions/lib/Gedmo/SoftDeleteable/SoftDeleteableListener.php';
include_once $this->targetDirs[3].'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/TreeListener.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/AttachEntityListenersListener.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/ConnectionFactory.php';

$a = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);

$b = new \Gedmo\Sluggable\SluggableListener();

$c = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'};

$b->setAnnotationReader($c);
$d = new \Gedmo\Timestampable\TimestampableListener();
$d->setAnnotationReader($c);
$e = new \Gedmo\SoftDeleteable\SoftDeleteableListener();
$e->setAnnotationReader($c);
$f = new \Gedmo\Tree\TreeListener();
$f->setAnnotationReader($c);

$a->addEventSubscriber(${($_ = isset($this->services['stof_doctrine_extensions.listener.loggable']) ? $this->services['stof_doctrine_extensions.listener.loggable'] : $this->getStofDoctrineExtensions_Listener_LoggableService()) && false ?: '_'});
$a->addEventSubscriber(new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->load('getFosUser_Util_PasswordUpdaterService.php')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->load('getFosUser_Util_CanonicalFieldsUpdaterService.php')) && false ?: '_'}));
$a->addEventSubscriber($b);
$a->addEventSubscriber($d);
$a->addEventSubscriber($e);
$a->addEventSubscriber(${($_ = isset($this->services['stof_doctrine_extensions.listener.blameable']) ? $this->services['stof_doctrine_extensions.listener.blameable'] : $this->getStofDoctrineExtensions_Listener_BlameableService()) && false ?: '_'});
$a->addEventSubscriber($f);
$a->addEventSubscriber(${($_ = isset($this->services['stof_doctrine_extensions.listener.translatable']) ? $this->services['stof_doctrine_extensions.listener.translatable'] : $this->getStofDoctrineExtensions_Listener_TranslatableService()) && false ?: '_'});
$a->addEventListener([0 => 'loadClassMetadata'], ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : ($this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener())) && false ?: '_'});

return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : ($this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))) && false ?: '_'}->createConnection(['driver' => 'pdo_mysql', 'host' => 'ftp.mef-assodoves.org', 'port' => 21, 'dbname' => 'c1462208c_mef_doves', 'user' => 'c1462208c', 'password' => 'k534XKpyNY3xCuJ', 'charset' => 'UTF8', 'driverOptions' => [], 'defaultTableOptions' => []], new \Doctrine\DBAL\Configuration(), $a, []);
